import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = "net.kunmc.lab"
version = "1.0.0"

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    flatDir { dirs "server/cache", "libs" }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"
//    compileOnly name: "patched_1.16.5"
    compileOnly "com.mojang:brigadier:1.0.18"
    implementation 'com.opencsv:opencsv:5.9'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

jar {
    doFirst {
        copy {
            from '.'
            into buildDir.name + '/resources/main/'
            include 'LICENSE*'
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += ["../src/main/java", "../../common/src/main/java", "../test_plugin_common/src/main/java"]
        }

        resources {
            srcDirs += ["../src/main/resources"]
        }
    }
}

shadowJar {
    mergeServiceFiles()
    archiveFileName = "${rootProject.name}-${project.version}.jar"
    relocate "net.kunmc.lab.commandlib", "${project.group}.${project.name.toLowerCase()}.commandlib"
    relocate "net.kunmc.lab.configlib", "${project.group}.${project.name.toLowerCase()}.configlib"
}
tasks.build.dependsOn tasks.shadowJar

processResources {
    def props = [name: rootProject.name, version: version, MainClass: getMainClassFQDN(projectDir.toPath())]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

shadowJar {
    exclude "net/minecraft"
    exclude "org/bukkit"
    exclude "com/mojang"
}
jar.finalizedBy("shadowJar")

jar {
    exclude "net/minecraft"
    exclude "org/bukkit"
    exclude "com/mojang"
}

task copyToServer(group: "copy", type: Copy) {
    mustRunAfter build
    from new File(buildDir.absolutePath, "libs/${rootProject.name}-${version}.jar")
    into "./server/plugins"
}

task copyProtocolLibToServer(group: "copy", type: Copy) {
    configurations.compileClasspath.getFiles().stream()
            .filter(x -> x.getName().matches(".*ProtocolLib.*.jar"))
            .findFirst()
            .ifPresent(x -> {
                from x
                into "server/plugins"
            })
}

task buildAndCopy(group: "build") {
    dependsOn build, copyToServer
}

task downloadServerJar {
    URL url = new URL("https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/794/downloads/paper-1.16.5-794.jar ")
    File file = new File(projectDir.toPath().toAbsolutePath().toString() + "/server/server.jar")

    if (!file.exists()) {
        try (InputStream stream = url.openStream()) {
            Files.copy(stream, file.toPath(), StandardCopyOption.REPLACE_EXISTING)
        }
    }
}

task generatePatchedJar(group: "setup", dependsOn: downloadServerJar) {
    String serverDir = projectDir.toPath().toAbsolutePath().toString() + "/server"

    File file = new File(serverDir + "/cache/patched_1.16.5.jar")
    if (file.exists()) {
        return
    }

    try {
        Runtime runtime = Runtime.getRuntime()
        Process p = runtime.exec("java -jar " + serverDir + "/server.jar nogui", new String[0], new File(serverDir))
        p.waitFor()
        p.destroy()
    } catch (Exception e) {
        e.printStackTrace()
    }
}

static String getMainClassFQDN(Path projectPath) {
    Path mainClassFile = Files.walk(projectPath)
            .filter(x -> x.getFileName().toString().endsWith(".java"))
            .filter(path -> Files.lines(path).anyMatch(str -> str.contains("extends JavaPlugin")))
            .findFirst()
            .get()
    return mainClassFile.toString().replace("\\", ".").replace("/", ".").replaceAll(".*src.main.java.|.java\$", "")
}
